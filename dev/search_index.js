var documenterSearchIndex = {"docs":
[{"location":"pluto_examples/cylinder/#cylinder","page":"cylinder","title":"cylinder.jl","text":"","category":"section"},{"location":"pluto_examples/cylinder/","page":"cylinder","title":"cylinder","text":"Download this Pluto.jl  notebook.","category":"page"},{"location":"pluto_examples/cylinder/","page":"cylinder","title":"cylinder","text":"<iframe style=\"height:2000px\" width=\"100%\" src=\"../cylinder.html\"> </iframe>","category":"page"},{"location":"allindex/#API-Index","page":"API Index","title":"API Index","text":"","category":"section"},{"location":"allindex/","page":"API Index","title":"API Index","text":"Modules = [SimplexGridFactory]","category":"page"},{"location":"api/#Builder-API","page":"API","title":"Builder API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [SimplexGridFactory]\nPages = [\"simplexgridbuilder.jl\"]","category":"page"},{"location":"api/#SimplexGridFactory.SimplexGridBuilder","page":"API","title":"SimplexGridFactory.SimplexGridBuilder","text":"mutable struct SimplexGridBuilder\n\nSimplex grid builder: wrapper around array based mesh generator interface. It allows to build up the input data incrementally.\n\n\n\n\n\n","category":"type"},{"location":"api/#SimplexGridFactory.SimplexGridBuilder-Tuple{}","page":"API","title":"SimplexGridFactory.SimplexGridBuilder","text":"SimplexGridBuilder(; Generator=nothing,\n                     tol=1.0e-12,\n                     checkexisting=true)\n\nCreate a SimplexGridBuilder.\n\nGenerator: module corresponding to mesh generator package.  Valid choices are TetGen and Triangulate, corresponding to the   respective Julia packages.\ncheckexisting: whether to check for already existing points\ntol: two points below this tolerance will be merged if checkexisting is true\n\n\n\n\n\n","category":"method"},{"location":"api/#ExtendableGrids.dim_space-Tuple{SimplexGridBuilder}","page":"API","title":"ExtendableGrids.dim_space","text":"dim_space(builder)\n\n\nSpace dimension of builder.\n\n\n\n\n\n","category":"method"},{"location":"api/#ExtendableGrids.simplexgrid-Tuple{SimplexGridBuilder}","page":"API","title":"ExtendableGrids.simplexgrid","text":"simplexgrid(builder; kwargs...)\n\nBuild simplex grid from the current state of the builder. kwargs overwrite those set with the options! method. See default_options for available kwargs.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimplexGridFactory.cellregion!-Tuple{SimplexGridBuilder, Any}","page":"API","title":"SimplexGridFactory.cellregion!","text":"cellregion!(builder,region)\n\nSet the current cell region (acts on subsequent regionpoint() calls)\n\nCell regions can be used to distinguish cells of different materials etc. In the API they are characterized by\n\nregion number set via cellregion!\nmaximum cell volume set via maxvolume!\nregion point set via  regionpoint!. This is some point located within the respective region which must be surrounded by facets in a watertight  manner. \n\n\n\n\n\n","category":"method"},{"location":"api/#SimplexGridFactory.checkexisting!-Tuple{Any, Any}","page":"API","title":"SimplexGridFactory.checkexisting!","text":"checkexisting!(builder, b)\n\n\nWhether to check for already existing points\n\n\n\n\n\n","category":"method"},{"location":"api/#SimplexGridFactory.facet!-Tuple{SimplexGridBuilder, Any}","page":"API","title":"SimplexGridFactory.facet!","text":"facet!(builder,i1)\nfacet!(builder,i1,i2)\nfacet!(builder,i1,i2,i3,i4)\nfacet!(builder,vector_or_tuple)\nfacet!(builder, (x1,y1), (x2,y2))\nfacet!(builder, (x1,y1,z1), (x2,y2,z2),(x3,y3,z3))\n\nAdd a facet via the corresponding point indices returned by point!. \n\nFacets of two points are solely used for 2D grids. Facets with more than two points are used for 3D grids and must be  planar.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimplexGridFactory.facetregion!-Tuple{SimplexGridBuilder, Any}","page":"API","title":"SimplexGridFactory.facetregion!","text":"facetregion!(builder,region)\n\nSet the current facet region. Subsequent facets will be marked with this number. Facet regions can be used to mark different parts of the boundary, e.g. for distinguishing boundary conditions.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimplexGridFactory.flags-Tuple{SimplexGridBuilder}","page":"API","title":"SimplexGridFactory.flags","text":"flags(builder)\n\nReturn mesh generator specific flag string created from builder options.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimplexGridFactory.holepoint!-Tuple{SimplexGridBuilder, Any}","page":"API","title":"SimplexGridFactory.holepoint!","text":"holepoint!(builder,x)\nholepoint!(builder,x,y)\nholepoint!(builder,x,y,z)\nholepoint!(builder,vec_or_tuple)\n\nAdd a point marking a hole region. Hole regions need to be surrounded by facets in a watertight manner.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimplexGridFactory.maxvolume!-Tuple{SimplexGridBuilder, Any}","page":"API","title":"SimplexGridFactory.maxvolume!","text":"maxvolume!(builder,vol)\n\nSet the current cell volume resp. area (acts on subsequent regionpoint() calls). See cellregion!.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimplexGridFactory.maybewatertight-Tuple{SimplexGridBuilder}","page":"API","title":"SimplexGridFactory.maybewatertight","text":" maybewatertight(this::SimplexGridBuilder; bregions=nothing)\n\nCheck if facets belonging to boundare regions in bregions are watertight. This is based on a number of heuristics, only a negative answer is definitive.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimplexGridFactory.options!-Tuple{SimplexGridBuilder}","page":"API","title":"SimplexGridFactory.options!","text":"options!(builder; kwargs...)\n\n\nSet some mesh generation options, see default_options\n\n\n\n\n\n","category":"method"},{"location":"api/#SimplexGridFactory.point!-Tuple{SimplexGridBuilder, Any}","page":"API","title":"SimplexGridFactory.point!","text":"point!(builder,x)\npoint!(builder,x,y)\npoint!(builder,x,y,z)\npoint!(builder,vec_or_tuple)\n\nAdd point or merge with already existing point. Returns its index which can be used to set up facets with facet!.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimplexGridFactory.polyfacet!-Tuple{SimplexGridBuilder, Union{Tuple, Vector}}","page":"API","title":"SimplexGridFactory.polyfacet!","text":"polyfacet!(builder,vector_or_tuple)\n\nAdd a polygonal facet via the corresponding point indices returned by point!. \n\nFacets with more than two points are used for 3D grids and must be  planar.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimplexGridFactory.regionpoint!-Tuple{SimplexGridBuilder, Any}","page":"API","title":"SimplexGridFactory.regionpoint!","text":"regionpoint!(builder,x)\nregionpoint!(builder,x,y)\nregionpoint!(builder,x,y,z)\nregionpoint!(builder,vec_or_tuple)\n\nAdd a region point marking a region, using current cell volume an cell region See cellregion!.\n\n\n\n\n\n","category":"method"},{"location":"api/#Grid-generator-options","page":"API","title":"Grid generator options","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [SimplexGridFactory]\nPages = [\"options.jl\"]","category":"page"},{"location":"api/#SimplexGridFactory.default_options-Tuple{}","page":"API","title":"SimplexGridFactory.default_options","text":"default_options()\n\n\nCreate dictionary of mesh generation options with default values. These at once describe the keyword arguments available to the methods of the package and are listed in the following table:\n\nkeyword default 2D 3D Explanation\nPLC true -p -p Triangulate/tetraheralize PLSG/PLC\nrefine false -r -r Refines a previously generated mesh.\nquality true -q -q Quality mesh generation\nminangle 20   Minimum angle for quality\nvolumecontrol true -a -a Maximum area constraint\nmaxvolume Inf   Value of area/volume constraint if less than Inf\nattributes true -A -A Regional attribute to each simplex.\nconfdelaunay true -D  Ensure that all circumcenter lie within the domain.\nnosteiner false -Y -Y Prohibits insertion of Steiner points on the mesh boundary\nquiet true -Q -Q Suppress all output unless an error occurs.\nverbose false -V -V Give detailed information.\ndebugfacets true  -d Detects self-intersections of facets of the PLC.\ncheck false -C -C Checks the consistency of the final mesh.\noptlevel 1  -O Specifies the level of mesh optimization.\nunsuitable nothing   Unsuitable function\naddflags \"\"   Additional flags\nflags nothing   Set flags, overwrite all other options\n\nFor mesh generation, these are turned into mesh generator control flags. This process can be completely overwritten by specifying the flags parameter. \n\nFor the flags parameter in 2D see the short resp. long documentation of the Triangle control flags.\n\nFor the 3D case, see the corresponding TetGen flags\n\nThe unsuitable parameter should be a function, see triunsuitable! .\n\n\n\n\n\n","category":"method"},{"location":"api/#Test-plots","page":"API","title":"Test plots","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Currently only for PyPlot. For plotting grids, see GridVisualize.jl.","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [SimplexGridFactory]\nPages = [\"plot.jl\"]","category":"page"},{"location":"api/#SimplexGridFactory.builderplot-Tuple{SimplexGridBuilder}","page":"API","title":"SimplexGridFactory.builderplot","text":"builderplot(gb::SimplexGridBuilder; Plotter, kwargs...)\n\n\nTwo panel visualization of gridfactory with input and resulting grid See default_options for available kwargs.\n\n\n\n\n\n","category":"method"},{"location":"api/#Some-primitives","page":"API","title":"Some primitives","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [SimplexGridFactory]\nPages = [\"primitives.jl\"]","category":"page"},{"location":"api/#SimplexGridFactory.bregions!-Tuple{SimplexGridBuilder, Any, AbstractArray}","page":"API","title":"SimplexGridFactory.bregions!","text":"bregions!(builder::SimplexGridBuilder,grid,regionlist;facetregions=nothing)\n\nAdd all boundary facets of grid with region numbers in region list  to geometry description. The optional parameter facetregions allows to overwrite the numbers in regionlist.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimplexGridFactory.bregions!-Tuple{SimplexGridBuilder, Any, Vararg{Any}}","page":"API","title":"SimplexGridFactory.bregions!","text":"bregions!(builder::SimplexGridBuilder,grid, pairs...)\n\nAdd  boundary facets of grid  with region numbers mentioned as first element in pairs with region number mentioned as second element of pairs to the geometry description.  If no pairs are given, add  all boundary facets of grid  with their original region numbers to builder.\n\nExample:\n\nbregions!(builder,grid, 1=>2, 3=>5)\n\n\n\n\n\n","category":"method"},{"location":"api/#SimplexGridFactory.circle!-Tuple{SimplexGridBuilder, Any, Any}","page":"API","title":"SimplexGridFactory.circle!","text":"circle!(builder, center, radius; n=20)\n\nAdd points and facets approximating a circle.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimplexGridFactory.lineto!-Tuple{SimplexGridBuilder, Any}","page":"API","title":"SimplexGridFactory.lineto!","text":"lineto!(builder, pt)\n\nGenerate a line from the current pen position to the target point pt, s moveto!(), (2D, 3D). pt is either an existing point index or a table of point coordinates. In the latter case, the point is added. It returns index of the target point.\n\nExample 2D: draw a square with different facetregion numbers\n\n p = moveto!(b,[0,0])\n facetregion!(b,1);  lineto!(b,[1,0])\n facetregion!(b,2);  lineto!(b,[1,1])\n facetregion!(b,3);  lineto!(b,[0,1])\n facetregion!(b,4);  lineto!(b,p)\n\nExample 3D: two planar facet with different facetregion numbers\n\n facetregion!(b,1);\n p1 = moveto!(b,[0,0,0])\n p2 = moveto!(b,[1,0,0])\n p3 = moveto!(b,[1,1,0])\n p4 = moveto!(b,[0,1,0])\n polyfacet!(b,[p1,p2,p3,p4])\n\n facetregion!(b,2);\n p1 = moveto!(b,[0,0,1])\n p2 = moveto!(b,[1,0,1])\n p3 = moveto!(b,[1,1,1])\n p4 = moveto!(b,[0,1,1])\n polyfacet!(b,[p1,p2,p3,p4])\n\n\n\n\n\n","category":"method"},{"location":"api/#SimplexGridFactory.mesh3d!-Tuple{Any, Any}","page":"API","title":"SimplexGridFactory.mesh3d!","text":"  mesh3d!(builder, mesh; translate=(0,0,0), cellregion=0, hole=false)\n\nIncorporate 3d model from mesh. \n\n\n\n\n\n","category":"method"},{"location":"api/#SimplexGridFactory.model3d!-Tuple{Any, String}","page":"API","title":"SimplexGridFactory.model3d!","text":"model3d!(builder, filename; translate=(0,0,0), cellregion=0, hole=false)\n\nLoad  3D model from file. File formats are those supported by MeshIO.jl.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimplexGridFactory.moveto!-Tuple{SimplexGridBuilder, Any}","page":"API","title":"SimplexGridFactory.moveto!","text":"moveto!(builder, pt)\n\nMove the (virtual) pen to the target point pt (2D, 3D). pt is either an existing point index or a table of point coordinates. In the latter case, the point is added. It returns index of the target point.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimplexGridFactory.rect2d!-Tuple{SimplexGridBuilder, Any, Any}","page":"API","title":"SimplexGridFactory.rect2d!","text":"rect2d!(builder, sw, ne; facetregions=nothing)\n\nAdd points and facets describing a rectangle via points describing its south-west and north-east corners. On default, the corresponding facet regions are deduced from the current facetregion. Alternatively,  a 4-vector of facetregions can be passed.\n\n\n\n\n\n","category":"method"},{"location":"api/#SimplexGridFactory.rect3d!-Tuple{SimplexGridBuilder, Any, Any}","page":"API","title":"SimplexGridFactory.rect3d!","text":"rect3d!(builder, bsw, tne; facetregions=nothing)\n\nAdd points and facets describing a qudrilateral via points describing its bottom south-west and top north-east corners. On default, the corresponding facet regions are deduced from the current facetregion. Alternatively,  a 6-vector of facetregions can be passed (in the sequence s-e-n-w-b-t)\n\n\n\n\n\n","category":"method"},{"location":"api/#SimplexGridFactory.sphere!-Tuple{SimplexGridBuilder, Any, Any}","page":"API","title":"SimplexGridFactory.sphere!","text":"sphere!(builder, center, radius; nref=3)\n\nAdd points and facets approximating a sphere. nref is a refinement level.\n\n\n\n\n\n","category":"method"},{"location":"changes/","page":"Changes","title":"Changes","text":"using Markdown\nMarkdown.parse(read(\"../../CHANGELOG.md\",String))","category":"page"},{"location":"pluto/#Pluto-Notebook(s)","page":"Pluto Notebook(s)","title":"Pluto Notebook(s)","text":"","category":"section"},{"location":"pluto/","page":"Pluto Notebook(s)","title":"Pluto Notebook(s)","text":"PlutoGridFactory","category":"page"},{"location":"script_examples/examples3d/#3D-Tetrahedralizations","page":"examples3d","title":"3D Tetrahedralizations","text":"","category":"section"},{"location":"script_examples/examples3d/","page":"examples3d","title":"examples3d","text":"These examples can be loaded into Julia (Revise.jl recommended)","category":"page"},{"location":"script_examples/examples3d/","page":"examples3d","title":"examples3d","text":"These examples return an ExtendableGrid with default simplex grid data.","category":"page"},{"location":"script_examples/examples3d/","page":"examples3d","title":"examples3d","text":"The control flags for TetGen are created based on default options provided by this module which try to ensure \"good\" grids for FEM and FVM computations. These are documented in SimplexGridFactory.default_options Occasional options! statements in the examples overwrite these defaults.","category":"page"},{"location":"script_examples/examples3d/#Domain-triangulation","page":"examples3d","title":"Domain triangulation","text":"","category":"section"},{"location":"script_examples/examples3d/","page":"examples3d","title":"examples3d","text":"Here we just describe a domain as a polygon and mesh it. This test code is released under the license conditions of TetGen.jl","category":"page"},{"location":"script_examples/examples3d/","page":"examples3d","title":"examples3d","text":"using SimplexGridFactory\nusing ExtendableGrids\nusing LinearAlgebra\nusing TetGen\n\nfunction tetrahedralization_of_cube()\n    builder = SimplexGridBuilder(; Generator = TetGen)\n\n    p1 = point!(builder, 0, 0, 0)\n    p2 = point!(builder, 1, 0, 0)\n    p3 = point!(builder, 1, 1, 0)\n    p4 = point!(builder, 0, 1, 0)\n    p5 = point!(builder, 0, 0, 1)\n    p6 = point!(builder, 1, 0, 1)\n    p7 = point!(builder, 1, 1, 1)\n    p8 = point!(builder, 0, 1, 1)\n\n    facetregion!(builder, 1)\n    facet!(builder, p1, p2, p3, p4)\n    facetregion!(builder, 2)\n    facet!(builder, p5, p6, p7, p8)\n    facetregion!(builder, 3)\n    facet!(builder, p1, p2, p6, p5)\n    facetregion!(builder, 4)\n    facet!(builder, p2, p3, p7, p6)\n    facetregion!(builder, 5)\n    facet!(builder, p3, p4, p8, p7)\n    facetregion!(builder, 6)\n    facet!(builder, p4, p1, p5, p8)\n\n    simplexgrid(builder; maxvolume = 0.001)\nend","category":"page"},{"location":"script_examples/examples3d/","page":"examples3d","title":"examples3d","text":"(Image: )","category":"page"},{"location":"script_examples/examples3d/#Cube-based-on-primitives","page":"examples3d","title":"Cube based on primitives","text":"","category":"section"},{"location":"script_examples/examples3d/","page":"examples3d","title":"examples3d","text":"We can also use predefined primitives to combine geometries","category":"page"},{"location":"script_examples/examples3d/","page":"examples3d","title":"examples3d","text":"function tet_cube_with_primitives()\n    builder = SimplexGridBuilder(; Generator = TetGen)\n    facetregion!(builder, 1)\n    cellregion!(builder, 1)\n    maxvolume!(builder, 0.1)\n    regionpoint!(builder, (0.5, 0.5, 0.5))\n    rect3d!(builder, (0, 0, 0), (10, 10, 10))\n\n    facetregion!(builder, 2)\n    cellregion!(builder, 2)\n    maxvolume!(builder, 0.05)\n    regionpoint!(builder, (4.5, 4.5, 4.5))\n    rect3d!(builder, (3, 3, 3), (5, 5, 6))\n\n    facetregion!(builder, 3)\n    cellregion!(builder, 3)\n    maxvolume!(builder, 0.025)\n    regionpoint!(builder, (7, 7, 5))\n    sphere!(builder, (7, 7, 5), 2; nref = 3)\n\n    facetregion!(builder, 4)\n    holepoint!(builder, (2, 7, 5))\n    sphere!(builder, (2, 7, 5), 1.5; nref = 3)\n\n    simplexgrid(builder)\nend","category":"page"},{"location":"script_examples/examples3d/","page":"examples3d","title":"examples3d","text":"(Image: )","category":"page"},{"location":"script_examples/examples3d/#Remeshing-another-grid","page":"examples3d","title":"Remeshing another grid","text":"","category":"section"},{"location":"script_examples/examples3d/","page":"examples3d","title":"examples3d","text":"The bregions! method allows to use another grid as geometry description","category":"page"},{"location":"script_examples/examples3d/","page":"examples3d","title":"examples3d","text":"function remesh_3d()\n    b = SimplexGridBuilder(; Generator = TetGen)\n    X=0:0.1:1\n    grid1 = simplexgrid(X, X, X)\n    bregions!(b,grid1)\n    simplexgrid(b,maxvolume=0.0001)\nend","category":"page"},{"location":"script_examples/examples3d/","page":"examples3d","title":"examples3d","text":"(Image: )","category":"page"},{"location":"script_examples/examples3d/#Glue-in-of-existing-grid","page":"examples3d","title":"Glue-in of existing grid","text":"","category":"section"},{"location":"script_examples/examples3d/","page":"examples3d","title":"examples3d","text":"The bregions! method allows to extract parts of the geometry description from an already existing grid.","category":"page"},{"location":"script_examples/examples3d/","page":"examples3d","title":"examples3d","text":"function glue_3d()\n    h0 = 1.0\n    X0 = -2:h0:12\n    Z0 = -2:h0:6\n    g0 = simplexgrid(X0, X0, Z0)\n\n    h = 0.25\n    X = 0:h:10\n    Z = 0:h:4\n\n    grid3 = simplexgrid(X, X, Z)\n    b = SimplexGridBuilder(; Generator = TetGen)\n\n    bregions!(b, g0, 1:6; facetregions = [8 for i = 1:7])\n    cellregion!(b, 2)\n    regionpoint!(b, (-1, -1, -1))\n\n    bregions!(b, grid3, 1:6)\n    holepoint!(b, (5, 5, 2))\n    gouter = simplexgrid(b; maxvolume = 0.4, nosteiner = true)\n    glue(gouter, grid3; g1regions = 1:6, interface = 7)\nend","category":"page"},{"location":"script_examples/examples3d/","page":"examples3d","title":"examples3d","text":"(Image: )","category":"page"},{"location":"script_examples/examples3d/#Load-STL-model","page":"examples3d","title":"Load STL model","text":"","category":"section"},{"location":"script_examples/examples3d/","page":"examples3d","title":"examples3d","text":"The model3d! method allows to load an stl model into the builder.","category":"page"},{"location":"script_examples/examples3d/","page":"examples3d","title":"examples3d","text":"function stl_3d()\n    modeldir = joinpath(dirname(pathof(TetGen)), \"..\", \"test\", \"surfaceModels\")\n    modelfile = joinpath(modeldir, \"stanford_bunny.stl\")\n    b = SimplexGridBuilder(; Generator = TetGen)\n    facetregion!(b, 2)\n    model3d!(b, modelfile; scale = 1 / 100, translate = (1, 1, 1), cellregion = 3)\n    simplexgrid(b; maxvolume = 1.0e-2)\nend","category":"page"},{"location":"script_examples/examples3d/","page":"examples3d","title":"examples3d","text":"(Image: )","category":"page"},{"location":"script_examples/examples3d/","page":"examples3d","title":"examples3d","text":"Plot generation","category":"page"},{"location":"script_examples/examples3d/","page":"examples3d","title":"examples3d","text":"using GridVisualize\nfunction generateplots(picdir; Plotter = nothing)\n    if isdefined(Plotter, :gcf)\n        size=(300,300)\n\n        Plotter.clf()\n        gridplot(tetrahedralization_of_cube(); Plotter, size, zplane = 0.5)\n        Plotter.savefig(joinpath(picdir, \"tetrahedralization_of_cube.png\"))\n\n        Plotter.clf()\n        gridplot(tet_cube_with_primitives(); Plotter, size, zplane = 5, azim = 47, elev = 80, interior = false)\n        Plotter.savefig(joinpath(picdir, \"tet_cube_with_primitives.png\"))\n\n        Plotter.clf()\n        gridplot(glue_3d(); Plotter, size, azim = 0, elev = 15, xplanes = [5])\n        Plotter.savefig(joinpath(picdir, \"glue_3d.png\"))\n\n        Plotter.clf()\n        gridplot(remesh_3d(); Plotter, size, zplanes = [0.5])\n        Plotter.savefig(joinpath(picdir, \"remesh_3d.png\"))\n\n        Plotter.clf()\n        gridplot(stl_3d(); Plotter, size, xplanes = [5])\n        Plotter.savefig(joinpath(picdir, \"stl_3d.png\"))\n\n    end\nend","category":"page"},{"location":"script_examples/examples3d/","page":"examples3d","title":"examples3d","text":"","category":"page"},{"location":"script_examples/examples3d/","page":"examples3d","title":"examples3d","text":"This page was generated using Literate.jl.","category":"page"},{"location":"script_examples/examples2d/#2D-Triangulations","page":"examples2d","title":"2D Triangulations","text":"","category":"section"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"These examples can be loaded into Julia (Revise.jl recommended)","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"These examples return either a SimplexGridBuilder struct which can be turned into a grid by calling simplexgrid(builder), or just an ExtendableGrid with default simplex grid data.","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"The control flags for Triangle are created based on default options provided by this module which try to ensure \"good\" grids for FEM and FVM computations. These are documented in SimplexGridFactory.default_options Occasional options! statements in the examples overwrite these defaults.","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"This test code is released under the license conditions of Triangulate.jl","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"using SimplexGridFactory\nusing ExtendableGrids\nusing LinearAlgebra\nusing Triangulate","category":"page"},{"location":"script_examples/examples2d/#Domain-triangulation","page":"examples2d","title":"Domain triangulation","text":"","category":"section"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"Here we just describe a domain as a polygon and mesh it.","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"function triangulation_of_domain()\n    builder = SimplexGridBuilder(; Generator = Triangulate)\n\n    p1 = point!(builder, 0, 0)\n    p2 = point!(builder, 1, 0)\n    p3 = point!(builder, 1, 2)\n    p4 = point!(builder, 0, 1)\n    p5 = point!(builder, -1, 2)\n\n    facet!(builder, p1, p2)\n    facet!(builder, p2, p3)\n    facet!(builder, p3, p4)\n    facet!(builder, p4, p5)\n    facet!(builder, p5, p1)\n\n    builder\nend","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"(Image: )","category":"page"},{"location":"script_examples/examples2d/#Triangulation-with-size-control-and-boundary-markers","page":"examples2d","title":"Triangulation with size control and boundary markers","text":"","category":"section"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"The previous example was a little bit bland. We miss:","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"size control for the triangles\ndifferently marking of boundary parts","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"function nicer_triangulation_of_domain()\n    builder = SimplexGridBuilder(; Generator = Triangulate)\n\n    p1 = point!(builder, 0, 0)\n    p2 = point!(builder, 1, 0)\n    p3 = point!(builder, 1, 2)\n    p4 = point!(builder, 0, 1)\n    p5 = point!(builder, -1, 2)\n\n    facetregion!(builder, 1)\n    facet!(builder, p1, p2)\n    facet!(builder, p2, p3)\n    facetregion!(builder, 2)\n    facet!(builder, p3, p4)\n    facet!(builder, p4, p5)\n    facetregion!(builder, 3)\n    facet!(builder, p5, p1)\n\n    options!(builder; maxvolume = 0.01)\n\n    builder\nend","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"(Image: )","category":"page"},{"location":"script_examples/examples2d/#Triangulation-with-subregions","page":"examples2d","title":"Triangulation with subregions","text":"","category":"section"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"Here we create different subregions and apply the maxvolume constraint to the subregions","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"function triangulation_of_domain_with_subregions()\n    builder = SimplexGridBuilder(; Generator = Triangulate)\n\n    p1 = point!(builder, 0, 0)\n    p2 = point!(builder, 1, 0)\n    p3 = point!(builder, 1, 2)\n    p4 = point!(builder, 0, 1)\n    p5 = point!(builder, -1, 2)\n\n    facetregion!(builder, 1)\n    facet!(builder, p1, p2)\n    facet!(builder, p2, p3)\n    facetregion!(builder, 2)\n    facet!(builder, p3, p4)\n    facet!(builder, p4, p5)\n    facetregion!(builder, 3)\n    facet!(builder, p5, p1)\n\n    facetregion!(builder, 4)\n    facet!(builder, p1, p4)\n\n    cellregion!(builder, 2)\n    maxvolume!(builder, 0.1)\n    regionpoint!(builder, -0.1, 0.5)\n\n    cellregion!(builder, 3)\n    maxvolume!(builder, 0.01)\n    regionpoint!(builder, 0.2, 0.2)\n\n    builder\nend","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"(Image: )","category":"page"},{"location":"script_examples/examples2d/#Direct-specification-of-input-arrays","page":"examples2d","title":"Direct specification of input arrays","text":"","category":"section"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"Of course we can specify the input for Triangle directly. The aim of SimplexBuilder is to avoid the tedious and error prone counting connected with this approach.","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"function direct_square(Generator = Triangulate)\n    simplexgrid(Generator;\n                points = [0 0; 0 1; 1 1; 1 0]',\n                bfaces = [1 2; 2 3; 3 4; 4 1]',\n                bfaceregions = [1, 2, 3, 4],\n                regionpoints = [0.5 0.5;]',\n                regionnumbers = [1],\n                regionvolumes = [0.01])\nend","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"(Image: )","category":"page"},{"location":"script_examples/examples2d/#Local-refinement","page":"examples2d","title":"Local refinement","text":"","category":"section"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"We can interface to Triangle's unsuitable mechanism","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"function square_localref()\n    builder = SimplexGridBuilder(; Generator = Triangulate)\n    cellregion!(builder, 1)\n    maxvolume!(builder, 0.01)\n    regionpoint!(builder, 0.5, 0.5)\n\n    p1 = point!(builder, 0, 0)\n    p2 = point!(builder, 1, 0)\n    p3 = point!(builder, 1, 1)\n    p4 = point!(builder, 0, 1)\n\n    facetregion!(builder, 1)\n    facet!(builder, p1, p2)\n    facetregion!(builder, 2)\n    facet!(builder, p2, p3)\n    facetregion!(builder, 3)\n    facet!(builder, p3, p4)\n    facetregion!(builder, 4)\n    facet!(builder, p4, p1)\n\n    refinement_center = [0.5, 0.5]\n    function unsuitable(x1, y1, x2, y2, x3, y3, area)\n        bary = [(x1 + x2 + x3) / 3, (y2 + y2 + y3) / 3]\n        dist = norm(bary - refinement_center)\n        if area > 0.01 * dist\n            return 1\n        else\n            return 0\n        end\n    end\n    options!(builder; unsuitable = unsuitable)\n    builder\nend","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"(Image: )","category":"page"},{"location":"script_examples/examples2d/#Domain-with-holes","page":"examples2d","title":"Domain with holes","text":"","category":"section"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"We can generate domains with holes. This at once shall demonstrate how the chosen API approach eases bookkeeping of features added to the geometry description","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"function swiss_cheese_2d()\n    function circlehole!(builder, center, radius; n = 20)\n        points = [point!(builder, center[1] + radius * sin(t), center[2] + radius * cos(t)) for t in range(0, 2π; length = n)]\n        for i = 1:(n - 1)\n            facet!(builder, points[i], points[i + 1])\n        end\n        facet!(builder, points[end], points[1])\n        holepoint!(builder, center)\n    end\n\n    builder = SimplexGridBuilder(; Generator = Triangulate)\n    cellregion!(builder, 1)\n    maxvolume!(builder, 0.1)\n    regionpoint!(builder, 0.1, 0.1)\n\n    p1 = point!(builder, 0, 0)\n    p2 = point!(builder, 10, 0)\n    p3 = point!(builder, 10, 10)\n    p4 = point!(builder, 0, 10)\n\n    facetregion!(builder, 1)\n    facet!(builder, p1, p2)\n    facet!(builder, p2, p3)\n    facet!(builder, p3, p4)\n    facet!(builder, p4, p1)\n\n    holes = [8.0 4.0;\n             1.0 2.0;\n             8.0 9.0;\n             3.0 4.0;\n             4.0 6.0;\n             7.0 9.0;\n             4.0 7.0;\n             7.0 5.0;\n             2.0 1.0;\n             4.0 1.0;\n             4.0 8.0;\n             2.0 8.0;\n             3.0 6.0;\n             4.0 9.0;\n             9.0 1.0;\n             9.0 1.0;\n             6.0 9.0;\n             8.0 9.0;\n             3.0 5.0;\n             1.0 4.0]'\n\n    radii = [0.15, 0.15, 0.1, 0.35, 0.2, 0.3, 0.1, 0.4, 0.1, 0.4, 0.4, 0.15, 0.2, 0.2, 0.2, 0.35, 0.15, 0.25, 0.15, 0.25]\n\n    for i = 1:length(radii)\n        facetregion!(builder, i + 1)\n        circlehole!(builder, holes[:, i], radii[i])\n    end\n\n    builder\nend","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"(Image: )","category":"page"},{"location":"script_examples/examples2d/#Remeshing-another-grid","page":"examples2d","title":"Remeshing another grid","text":"","category":"section"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"The bregions! method allows to use another grid as geometry description","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"function remesh_2d()\n    b = SimplexGridBuilder(; Generator = Triangulate)\n    X=0:0.1:1\n    grid1 = simplexgrid(X, X)\n    bregions!(b,grid1)\n    simplexgrid(b,maxvolume=0.01)\nend","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"(Image: )","category":"page"},{"location":"script_examples/examples2d/#Glueing-in-another-grid","page":"examples2d","title":"Glueing in another grid","text":"","category":"section"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"The bregions! method allows to extract parts of the geometry description from an already existing grid.","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"function glue_2d()\n    b = SimplexGridBuilder(; Generator = Triangulate)\n\n    h = 0.25\n    X = 0:h:10\n    Y = 0:h:4\n\n    grid1 = simplexgrid(X, Y)\n    bfacemask!(grid1, [0, 2], [10, 2], 7)\n    cellmask!(grid1, [0, 0], [10, 2], 2)\n\n    xmin = -2\n    x0min = 0\n    x0max = 10\n    xmax = 12\n    y0min = 0\n    ymin = -2\n    y0max = 4\n    ymax = 6\n    facetregion!(b, 8)\n    facet!(b, (xmin, ymin), (xmax, ymin))\n    facet!(b, (xmax, ymin), (xmax, 2))\n    facet!(b, (xmax, 2), (xmax, ymax))\n    facet!(b, (xmin, ymax), (xmax, ymax))\n    facet!(b, (xmin, ymin), (xmin, 2))\n    facet!(b, (xmin, 2), (xmin, ymax))\n\n    facetregion!(b, 7)\n    facet!(b, (x0min, 2), (xmin, 2))\n    facet!(b, (x0max, 2), (xmax, 2))\n\n    cellregion!(b, 1)\n    regionpoint!(b, 5, 5)\n\n    cellregion!(b, 2)\n    regionpoint!(b, 5, -1)\n\n    holepoint!(b, 5, 2)\n\n    bregions!(b, grid1, 1:6)\n    grid2 = simplexgrid(b; maxvolume = 0.6)\n    grid2 = glue(grid1, grid2)\nend","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"(Image: )","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"Plot generation","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"using GridVisualize\nfunction generateplots(picdir; Plotter = nothing)\n    if isdefined(Plotter, :Makie)\n        size = (600, 300)\n        Plotter.activate!(; type = \"png\", visible = false)\n\n        p = builderplot(triangulation_of_domain(); Plotter, size)\n        Plotter.save(joinpath(picdir, \"triangulation_of_domain.png\"),p)\n\n        p = builderplot(nicer_triangulation_of_domain(); Plotter, size)\n        Plotter.save(joinpath(picdir, \"nicer_triangulation_of_domain.png\"),p)\n\n        p = builderplot(triangulation_of_domain_with_subregions(); Plotter, size)\n        Plotter.save(joinpath(picdir, \"triangulation_of_domain_with_subregions.png\"),p)\n\n        p = builderplot(square_localref(); Plotter, size)\n        Plotter.save(joinpath(picdir, \"square_localref.png\"),p)\n\n        p = gridplot(direct_square(); Plotter, size)\n        Plotter.save(joinpath(picdir, \"direct_square.png\"),p)\n\n        p = builderplot(swiss_cheese_2d(); Plotter, size)\n        Plotter.save(joinpath(picdir, \"swiss_cheese_2d.png\"),p)\n\n        p = gridplot(remesh_2d(); Plotter, size)\n        Plotter.save(joinpath(picdir, \"remesh_2d.png\"),p)\n\n        p = gridplot(glue_2d(); Plotter, size)\n        Plotter.save(joinpath(picdir, \"glue_2d.png\"),p)\n    end\nend","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"","category":"page"},{"location":"script_examples/examples2d/","page":"examples2d","title":"examples2d","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"SimplexGridFactory","category":"page"},{"location":"#SimplexGridFactory","page":"Home","title":"SimplexGridFactory","text":"SimplexGridFactory\n\n(Image: linux-macos-windows) (Image: ) (Image: ) (Image: Aqua QA)\n\nSimplexGridFactory\n\nProvides SimplexGridBuilder, a convenience  interface to the triangle (via  Triangulate.jl) and TetGen (via TetGen.jl) mesh generators.  Code using it  needs to pass the Triangulate resp. the   TetGen   module   as   parameter  to   the   constructor of SimplexGridBuilder  and thus  needs to adhere to  their respective license conditions. This package itself is MIT licensed.\n\n\n\n\n\n","category":"module"},{"location":"","page":"Home","title":"Home","text":"Depth=5","category":"page"},{"location":"internals/#Mesh-generator-interface","page":"Internals","title":"Mesh generator interface","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [SimplexGridFactory]\nPages = [\"triangle.jl\",\"tetgen.jl\",\"simplexgrid.jl\"]","category":"page"},{"location":"internals/#ExtendableGrids.simplexgrid-Tuple{Type{SimplexGridFactory.TriangulateType}, Any, Any}","page":"Internals","title":"ExtendableGrids.simplexgrid","text":"simplexgrid(\n    ::Type{SimplexGridFactory.TriangulateType},\n    Triangulate,\n    input;\n    kwargs...\n) -> Any\n\n\nCreate Grid from Triangle input data.\n\nSee default_options for available kwargs.\n\n\n\n\n\n","category":"method"},{"location":"internals/#SimplexGridFactory.triangulateio-Tuple{Any}","page":"Internals","title":"SimplexGridFactory.triangulateio","text":"triangulateio(\n    Triangulate;\n    points,\n    bfaces,\n    bfaceregions,\n    regionpoints,\n    regionnumbers,\n    regionvolumes\n) -> Any\n\n\nCreate a TriangulateIO structure  from a number of input arrays. The 2D input arrays are transposed if necessary and converted to the proper data types for Triangulate.\n\nThis conversion is not performed if the data types are those indicated in the defaults and the leading dimension of 2D arrays corresponds to the space dimension.\n\n\n\n\n\n","category":"method"},{"location":"internals/#SimplexGridFactory.triangulateio-Tuple{SimplexGridBuilder}","page":"Internals","title":"SimplexGridFactory.triangulateio","text":"triangulateio(this::SimplexGridBuilder) -> Any\n\n\nCreate triangle input from the current state of the builder.\n\n\n\n\n\n","category":"method"},{"location":"internals/#ExtendableGrids.simplexgrid-Tuple{Type{SimplexGridFactory.TetGenType}, Any, Any}","page":"Internals","title":"ExtendableGrids.simplexgrid","text":"simplexgrid(\n    ::Type{SimplexGridFactory.TetGenType},\n    TetGen,\n    input;\n    kwargs...\n) -> Any\n\n\nCreate Grid from TetGen data.\n\nSee default_options for available kwargs.\n\n\n\n\n\n","category":"method"},{"location":"internals/#SimplexGridFactory.tetgenio-Tuple{Any}","page":"Internals","title":"SimplexGridFactory.tetgenio","text":"tetgenio(\n    TetGen;\n    points,\n    bfaces,\n    bfaceregions,\n    regionpoints,\n    regionnumbers,\n    regionvolumes\n) -> Any\n\n\nCreate a RawTetGenIO structure  from a number of input arrays. The 2D input arrays are transposed if necessary and converted to the proper data types for TetGen.\n\nThis conversion is not performed if the data types are those indicated in the defaults and the leading dimension of 2D arrays corresponds to the space dimension.\n\n\n\n\n\n","category":"method"},{"location":"internals/#SimplexGridFactory.tetgenio-Tuple{SimplexGridBuilder}","page":"Internals","title":"SimplexGridFactory.tetgenio","text":"tetgenio(this::SimplexGridBuilder) -> Any\n\n\nCreate tetgen input from the current state of the builder.\n\n\n\n\n\n","category":"method"},{"location":"internals/#ExtendableGrids.simplexgrid-Tuple{Module}","page":"Internals","title":"ExtendableGrids.simplexgrid","text":"      simplexgrid(Generator;\n                     points=Array{Cdouble,2}(undef,0,0),\n                     bfaces=Array{Cint,2}(undef,0,0),\n                     bfaceregions=Array{Cint,1}(undef,0),\n                     regionpoints=Array{Cdouble,2}(undef,0,0),\n                     regionnumbers=Array{Cint,1}(undef,0),\n                     regionvolumes=Array{Cdouble,1}(undef,0);\n                     kwargs...\n                  )\n\nCreate Grid from a number of input arrays. The 2D input arrays are transposed if necessary and converted to the proper data types for Triangulate or TetGen\n\nThis conversion is not performed if the data types are those indicated in the defaults and the leading dimension of 2D arrays corresponds to the space dimension.\n\nSee default_options for available kwargs.\n\n\n\n\n\n","category":"method"},{"location":"internals/","page":"Internals","title":"Internals","text":"istriangulate\nistetgen","category":"page"},{"location":"internals/#SimplexGridFactory.istriangulate","page":"Internals","title":"SimplexGridFactory.istriangulate","text":"istriangulate(Generator)\n\nCheck if generator is Triangulate.\n\n\n\n\n\n","category":"function"},{"location":"internals/#SimplexGridFactory.istetgen","page":"Internals","title":"SimplexGridFactory.istetgen","text":"istetgen(Generator)\n\nCheck if generator is TetGen.\n\n\n\n\n\n","category":"function"},{"location":"pluto_examples/gridgenvis/#gridgenvis","page":"gridgenvis","title":"gridgenvis.jl","text":"","category":"section"},{"location":"pluto_examples/gridgenvis/","page":"gridgenvis","title":"gridgenvis","text":"Download this Pluto.jl  notebook.","category":"page"},{"location":"pluto_examples/gridgenvis/","page":"gridgenvis","title":"gridgenvis","text":"<iframe style=\"height:2000px\" width=\"100%\" src=\"../gridgenvis.html\"> </iframe>","category":"page"}]
}
